<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:\Users\PC\Documents\NetBeansProjects\Movies Gallery - IMS\movies_database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2758"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainratings"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Admins" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="96"/><column index="3" value="94"/><column index="4" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="movies" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="52"/><column index="2" value="64"/><column index="3" value="112"/><column index="4" value="114"/><column index="5" value="85"/><column index="7" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ratings" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="52"/><column index="2" value="89"/><column index="3" value="74"/><column index="4" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="users" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="90"/><column index="2" value="96"/><column index="3" value="94"/><column index="4" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 2">INSERT INTO Movies (title, image_path, category, length_hours, num_actors, producer_id) VALUES
('Movie 1', 'poster1.jpg', 'Adventure', 2.5, 4, 1),
('Movie 2', 'poster2.jpg', 'Romantic', 2.0, 3, 2),
('Movie 3', 'poster3.jpg', 'Comedy', 1.75, 5, 3);

INSERT INTO Producers VALUES
(1,'Jhon', '1'),
(2,'Linda', ' 2'),
(3,'Cameron', '3');


</sql><sql name="moviesQuery.sql">
   

CREATE TABLE ratings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    movie_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    rating INTEGER NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE movies (
    movie_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    image_path TEXT,
	category TEXT CHECK (category IN ('Adventure', 'Romantic', 'Comedy', 'Drama', 'Action')),
    length_hours REAL,
    num_actors INTEGER,
    producer_id INTEGER,
    FOREIGN KEY (producer_id) REFERENCES Producers(producer_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Movies (
    movie_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    category TEXT CHECK (category IN ('Adventure', 'Romantic', 'Comedy', 'Drama', 'Action')),
    length_hours REAL,
    num_actors INTEGER,
    producer_id INTEGER,
    FOREIGN KEY (producer_id) REFERENCES Producers(producer_id)
);

CREATE TABLE IF NOT EXISTS Producers (
    producer_id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT,
    phone_number TEXT
);

CREATE TABLE IF NOT EXISTS Admins (
    admin_id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT,
    username TEXT UNIQUE,
    password TEXT
);

CREATE TABLE IF NOT EXISTS users (
    admin_id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT,
    username TEXT UNIQUE,
    password TEXT
);

INSERT INTO ratings (movie_id, user_id, rating)
VALUES
    (1, 1, 4), -- Movie 1, User 1 gives a rating of 4
    (1, 2, 5), -- Movie 1, User 2 gives a rating of 5
    (2, 1, 3), -- Movie 2, User 1 gives a rating of 3
    (2, 2, 4), -- Movie 2, User 2 gives a rating of 4
    (3, 1, 5), -- Movie 3, User 1 gives a rating of 5
    (3, 2, 4); -- Movie 3, User 2 gives a rating of 4

ALTER TABLE users RENAME COLUMN admin_id TO user_id;

ALTER TABLE ratings RENAME TO ratings_temp;
CREATE TABLE ratings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    movie_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    rating INTEGER NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
INSERT INTO ratings SELECT * FROM ratings_temp;
DROP TABLE ratings_temp;

DROP TABLE ratings;
ALTER TABLE movies RENAME COLUMN id TO movie_id;

CREATE TABLE IF NOT EXISTS ratings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    movie_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    rating INTEGER NOT NULL,
    FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

INSERT INTO ratings (movie_id, user_id, rating)
VALUES
    (1, 1, 4), -- Movie 1, User 1 gives a rating of 4
    (1, 2, 5), -- Movie 1, User 2 gives a rating of 5
    (2, 1, 3), -- Movie 2, User 1 gives a rating of 3
    (2, 2, 4), -- Movie 2, User 2 gives a rating of 4
    (3, 1, 5), -- Movie 3, User 1 gives a rating of 5
    (3, 2, 4); -





</sql><current_tab id="1"/></tab_sql></sqlb_project>
